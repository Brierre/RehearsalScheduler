package com.msaunthaigh.rehearsalscheduler.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Component;

import com.msaunthaigh.rehearsalscheduler.entity.ScenePart;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class DefaultScenePartDao implements ScenePartDao {
	@Autowired
	private NamedParameterJdbcTemplate jdbcTemplate;
	
	@Override
	public List<ScenePart> fetchPartsByScene(Integer sceneNumber, Integer partNumber, String firstName, String lastName, String characterName, String musicalName) {
		log.info("DAO: fetching parts for sceneNumber={}", sceneNumber);
		
		// @formatter:off
		String sql = ""
				+ "SELECT scene_part.scene_number, scene_part.part_number, part.part_number, part.musical_name, scene.scene_number, scene.musical_name, scene.scene_name, scene.song_title, part.character_name, part.part_number, "
				+ "castmember.first_name, castmember.last_name "
				+ "FROM scene_part "
				+ "JOIN scene "
				+ "ON scene.scene_number = scene_part.scene_number "
				+ "JOIN part "
				+ "ON part.part_number = scene_part.part_number "
				+ "JOIN castmember "
				+ "ON castmember.castmember_id = part.castmember_id "
				+ "WHERE scene.scene_number = :scene_number OR part.part_number = :part_number OR ((castmember.first_name = :first_name OR "
				+ "castmember.last_name = :last_name) AND scene.musical_name = :musical_name)";
		
		// @formatter:on
		
		Map<String, Object> params = new HashMap<>();
		params.put("scene_number", sceneNumber);
		params.put("part_number", partNumber);
		params.put("first_name", firstName);
		params.put("last_name", lastName);
		params.put("character_name", characterName);
		params.put("musical_name", musicalName);

		return jdbcTemplate.query(sql, params, new RowMapper<>() {
			@Override
			public ScenePart mapRow(ResultSet rs, int rowNum) throws SQLException {
				// @formatter:off
				return ScenePart.builder()
					.sceneNumber(rs.getInt("scene_number"))
					.partNumber(rs.getInt("part_number"))
					.firstName(rs.getString("first_name"))
					.lastName(rs.getString("last_name"))
					.characterName(rs.getString("character_name"))
					.musicalName(rs.getString("musical_name"))
					.build();
				// @formatter:on
			}
		});
	}

	
	public Optional<ScenePart> populateCastFK(Integer sceneNumber, Integer partNumber, Integer castmemberId) {
		log.info("DAO: sceneNumber={}, partNumber={}, castmemberId={}", sceneNumber, partNumber, castmemberId);
		
		// @formatter:off
		String sql = ""
				+ "UPDATE scene_part "
				+ "JOIN part "
				+ "ON scene_part.part_number = part.part_number "
				+ "JOIN castmember "
				+ "ON scene_part.castmember_id = castmember.castmember_id "
				+ "SET part_number = part.part_number, castmember_id = castmember.castmember_id";
		// @formatter:on
		
		Map<String, Object> params = new HashMap<>();
		params.put("scene_number", sceneNumber);
		params.put("part_number", partNumber);
		params.put("castmember_id", castmemberId);
		
		jdbcTemplate.update(sql, params);
		// @formatter:off
		return Optional.ofNullable(ScenePart
			.builder()
			.sceneNumber(sceneNumber)
			.partNumber(partNumber)
			.castmemberId(castmemberId)
			.build());
		// @formatter:on
	}

}