package com.msaunthaigh.rehearsalscheduler.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.ResultSetExtractor;
//import org.springframework.dao.DataAccessException;
//import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Component;

import com.msaunthaigh.rehearsalscheduler.entity.Part;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class DefaultPartDao implements PartDao {

	@Autowired
	private NamedParameterJdbcTemplate jdbcTemplate;
	
	@Override
	public List<Part> fetchParts(Integer partId, Integer castId, String characterName, 
			String characterGroup, String musicalName) {
		log.info("DAO: fetching part: partId={}, castId={}, characterName={}, characterGroup={}, musicalName={}", 
				partId, castId, characterName, characterGroup, musicalName);
		// @formatter:off
		String sql = ""
				+ "SELECT * "
				+ "FROM part "
				+ "JOIN castmember "
				+ "ON part.castmember_id = castmember.castmember_id "
				+ "WHERE castmember.castmember_id = :castmember_id OR part_id = :part_id "
				+ "OR part.character_name = :character_name OR musical_name = :musical_name";
		
		// @formatter:on
		
		Map<String, Object> params = new HashMap<>();
		params.put("part_id", partId);
		params.put("castmember_id", castId);
		params.put("character_name", characterName);
		params.put("character_group", characterGroup);
		params.put("musical_name", musicalName);
		
		return jdbcTemplate.query(sql, params, new RowMapper<>() {
			@Override
			public Part mapRow(ResultSet rs, int rowNum) throws SQLException {
				// @formatter:off
				return Part.builder()
						.partId(rs.getInt("part_id"))
						.castId(rs.getInt("castmember_id"))
						.characterName(rs.getString("character_name"))
						.characterGroup(rs.getString("character_group"))
						.musicalName(rs.getString("musical_name"))
						.build();
				
				// @formatter:on
			}
		});
	}
	
	@Override
	public Optional<Part> fetchPartByID(Integer partId, Integer castId, String characterName, 
			String characterGroup) {
		log.info("DAO: fetching part: partId={}, castId={}, characterName={}, characterGroup={}", 
				partId, castId, characterName, characterGroup);
		// @formatter:off
		String sql = ""
				+ "SELECT * "
				+ "FROM part "
				+ "WHERE part_id = :part_id";
		
		// @formatter:on
		
		
		Map<String, Object> params = new HashMap<>();
		params.put("part_id", partId);
		params.put("castmember_id", castId);
		params.put("character_name", characterName);
		params.put("character_group", characterGroup);
		
		return Optional.ofNullable(jdbcTemplate.query(sql, params, new PartResultSetExtractor()));
	}
	

class PartResultSetExtractor implements ResultSetExtractor<Part> {
			@Override
			public Part extractData(ResultSet rs) 
					throws SQLException, DataAccessException {
				rs.next();
				// @formatter:off
				return Part.builder()
						.partId(rs.getInt("part_id"))
						.castId(rs.getInt("castmember_id"))
						.characterName(rs.getString("character_name"))
						.characterGroup(rs.getString("character_group"))
						.build();
				// @formatter:on
			}
	}
}
	


			


	
	
