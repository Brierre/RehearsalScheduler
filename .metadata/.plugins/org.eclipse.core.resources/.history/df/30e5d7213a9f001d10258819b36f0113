package com.msaunthaigh.rehearsalscheduler.dao;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Component;

import com.msaunthaigh.rehearsalscheduler.entity.CastMember;
import com.msaunthaigh.rehearsalscheduler.entity.ScenePart;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class DefaultScenePartDao implements ScenePartDao {
	@Autowired
	private NamedParameterJdbcTemplate jdbcTemplate;
	
	@Override
	public Optional<ScenePart> populateFK(Integer sceneNumber, Integer partNumber, Integer castmemberId) {
		log.info("DAO: sceneNumber={}, partNumber={}, castmemberId={}", sceneNumber, partNumber, castmemberId);
		
		// @formatter:off
		String sql = ""
				+ "UPDATE scene_part "
				+ "SET scene_part.part_number = part.part_number, scene_part.castmember_id = castmember.castmember_id "
				+ "FROM part, customer "
				+ "INNER JOIN part "
				+ "ON scene_part.part_number = part.part_number, "
				+ "INNER JOIN castmember "
				+ "ON scene_part.castmember_id = castmember.castmember_id "
				+ "WHERE scene_part.scene_number = :scene_number";
		// @formatter:on
		
		Map<String, Object> params = new HashMap<>();
		params.put("scene_number", sceneNumber);
		params.put("part_number", partNumber);
		params.put("castmember_id", castmemberId);
		
		jdbcTemplate.update(sql, params);
		// @formatter:off
		return Optional.ofNullable(ScenePart
			.builder()
			.sceneNumber(sceneNumber)
			.partNumber(partNumber)
			.castmemberId(castmemberId)
			.build());
		// @formatter:on
	}

}