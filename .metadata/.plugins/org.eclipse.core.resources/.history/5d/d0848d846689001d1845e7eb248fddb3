package com.msaunthaigh.rehearsalscheduler.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Component;

import com.msaunthaigh.rehearsalscheduler.entity.ScenePart;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class DefaultScenePartDao implements ScenePartDao {
	@Autowired
	private NamedParameterJdbcTemplate jdbcTemplate;
	
	@Override
	public List<ScenePart> fetchPartsByScene(Integer sceneIdFK, Integer partIdFK) {
		log.info("DAO: fetching parts for sceneIdFK={}", sceneIdFK);
		
		// @formatter:off
		String sql = ""
				+ "SELECT scene_id_fk, part_id_fk, scene.scene_name, scene.song_title, part.character_name, castmember.first_name, castmember.last_name "
				+ "FROM scene_part "
				+ "JOIN scene "
				+ "ON scene.scene_id = scene_part.scene_id_fk "
				+ "JOIN part "
				+ "ON part.part_id = scene_part.part_id_fk "
				+ "WHERE scene.scene_id = :scene_id_fk";
		
		// @formatter:on
		
		Map<String, Object> params = new HashMap<>();
		params.put("scene_id_fk", sceneIdFK);
		params.put("part_id_fk", partIdFK);

		return jdbcTemplate.query(sql, params, new RowMapper<>() {
			@Override
			public ScenePart mapRow(ResultSet rs, int rowNum) throws SQLException {
				// @formatter:off
				return ScenePart.builder()
						.sceneIdFK(rs.getInt("scene_id_fk"))
						.partIdFK(rs.getInt("part_id_fk"))
						.build();
				// @formatter:on
			}
		});
	}

}